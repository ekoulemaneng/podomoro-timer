{"version":3,"sources":["audio/alarm.mp3","components/Setting.js","components/Displaying.js","components/Running.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Setting","props","react_default","a","createElement","className","id","onClick","handleClickSetting","index_es","icon","faMinus","breakDuration","faPlus","sessionDuration","Displaying","minutes","timeLeftMinutes","toString","secondes","timeLeftSecondes","timerLabel","Running","handleClickPlayStop","countDownIsRunning","faPause","faPlay","handleClickReset","faSyncAlt","Podomoro","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","e","target","getAttribute","parentElement","setState","countDownTimer","playAlarm","_this2","interval","setInterval","clearInterval","stopAlarm","document","getElementById","play","audio","pause","currentTime","components_Setting","components_Displaying","components_Running","src","type","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2e79644.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alarm.61eb5a40.mp3\";","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMinus } from '@fortawesome/free-solid-svg-icons';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\n\nfunction Setting(props) {\n    return (\n        <div className='row'>\n            <div className='col px-0'>\n                <div className='text-center mb-2' id=\"break-label\">Break Length</div>\n                <div className='text-center'>\n                    <button className='btn btn-dark mx-1' id=\"break-decrement\" onClick={props.handleClickSetting}><FontAwesomeIcon  icon={faMinus} onClick={props.handleClickSetting} /></button>\n                    <div className='d-inline-block' id=\"break-length\">{props.breakDuration}</div>\n                    <button className='btn btn-dark mx-1' id=\"break-increment\" onClick={props.handleClickSetting}><FontAwesomeIcon icon={faPlus} onClick={props.handleClickSetting} /></button>\n                </div>\n            </div>\n            <div className='col px-0'>\n                <div className='text-center mb-2' id=\"session-label\">Session Length</div>\n                <div className='text-center'>\n                    <button className='btn btn-dark mx-1' id=\"session-decrement\" onClick={props.handleClickSetting}><FontAwesomeIcon icon={faMinus} onClick={props.handleClickSetting} /></button>\n                    <div className='d-inline-block' id=\"session-length\">{props.sessionDuration}</div>\n                    <button className='btn btn-dark mx-1' id=\"session-increment\" onClick={props.handleClickSetting}><FontAwesomeIcon icon={faPlus} onClick={props.handleClickSetting} /></button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Setting;","import React from 'react';\n\nfunction Displaying(props) {\n\n    let minutes = props.timeLeftMinutes >= 10 ? props.timeLeftMinutes.toString() : '0' + props.timeLeftMinutes.toString();\n    let secondes = props.timeLeftSecondes >= 10 ? props.timeLeftSecondes.toString() : '0' + props.timeLeftSecondes.toString();\n\n    return (\n        <div className='text-center'>\n            <div className='mt-4 font-weight-bold h4' id=\"timer-label\">{props.timerLabel}</div>\n            <div className='display-2' id=\"time-left\">\n                {minutes}:{secondes}\n            </div>\n        </div>\n    );\n    \n}\n\nexport default Displaying;","import React from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay } from '@fortawesome/free-solid-svg-icons';\nimport { faPause } from '@fortawesome/free-solid-svg-icons';\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons';\n\nfunction Running(props) {\n    return (\n        <div className='text-center mt-3'>\n            <button className='btn btn-dark mx-4' id=\"start_stop\" onClick={props.handleClickPlayStop}>{props.countDownIsRunning ? <FontAwesomeIcon icon={faPause} /> : <FontAwesomeIcon icon={faPlay} />}</button>\n            <button className='btn btn-dark mx-4' id=\"reset\" onClick={props.handleClickReset}><FontAwesomeIcon icon={faSyncAlt} /></button>\n        </div>\n    );\n}\n\nexport default Running;","import React from 'react';\n\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\nimport Setting from './components/Setting';\nimport Displaying from './components/Displaying';\nimport Running from './components/Running';\n\nimport audio from './audio/alarm.mp3';\n\nclass Podomoro extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakDuration: 5,\n      sessionDuration: 25,\n      timerLabel: 'Session',\n      timeLeftMinutes: 25,\n      timeLeftSecondes: 0,\n      countDownIsRunning: false\n    };\n    this.handleClickSetting = this.handleClickSetting.bind(this);\n    this.handleClickPlayStop = this.handleClickPlayStop.bind(this); \n    this.handleClickReset = this.handleClickReset.bind(this);\n  }\n\n  handleClickSetting(e) {\n\n    let target = e.target.getAttribute('id') != null ? e.target.getAttribute('id') : e.target.parentElement.getAttribute('id');\n    let breakDuration = this.state.breakDuration;\n    let sessionDuration = this.state.sessionDuration;\n\n    switch(target) {\n      case 'break-decrement':\n        if (this.state.countDownIsRunning) return;\n        else if (breakDuration > 1) {\n          this.setState(()=>({breakDuration: breakDuration - 1}));\n          if (this.state.timerLabel === 'Break') this.setState((state)=>({timeLeftMinutes: state.breakDuration}));\n        }\n        break;\n      case 'break-increment':\n        if (this.state.countDownIsRunning) return;\n        else if (breakDuration < 60) {\n          this.setState(()=>({breakDuration: breakDuration + 1}));\n          if (this.state.timerLabel === 'Break') this.setState((state)=>({timeLeftMinutes: state.breakDuration}));\n        }\n        break;\n      case 'session-decrement':\n        if (this.state.countDownIsRunning) return;\n        else if (sessionDuration > 1) {\n          this.setState(()=>({sessionDuration: sessionDuration - 1}));\n          if (this.state.timerLabel === 'Session') this.setState((state)=>({timeLeftMinutes: state.sessionDuration}));\n        }\n        break;\n      case 'session-increment':\n        if (this.state.countDownIsRunning) return;\n        else if (sessionDuration < 60) {\n          this.setState(()=>({sessionDuration:sessionDuration + 1}));\n          if (this.state.timerLabel === 'Session') this.setState((state)=>({timeLeftMinutes: state.sessionDuration}));\n        }\n        break;\n      default:\n    }\n\n  }\n\n  handleClickPlayStop() {\n    if (this.state.countDownIsRunning) {\n      this.setState(()=>({countDownIsRunning: false}));\n    }\n    else {\n      this.setState(()=>({countDownIsRunning: true}));\n      this.countDownTimer();\n    }\n  }\n\n  countDownTimer() {\n\n    if (!this.state.countDownIsRunning) return;\n\n    let minutes = this.state.timeLeftMinutes;\n    let secondes = this.state.timeLeftSecondes;\n\n    if (minutes === 0 && secondes === 0) {\n      this.playAlarm();\n      if (this.state.timerLabel === 'Session') {\n        this.setState(()=>({timerLabel: 'Break'}));\n        this.setState((state)=>({timeLeftMinutes: state.breakDuration}));\n      }\n      else if (this.state.timerLabel === 'Break') {\n        this.setState(()=>({timerLabel: 'Session'}));\n        this.setState((state)=>({timeLeftMinutes: state.sessionDuration}));\n      }\n    }\n    else if (secondes === 0) {\n      minutes--;\n      this.setState(()=>({timeLeftMinutes: minutes}));\n      this.setState(()=>({timeLeftSecondes: 59}));\n    }\n    else {\n      secondes--;\n      this.setState(()=>({timeLeftSecondes: secondes}));\n    }\n\n  }\n\n  \n  componentDidMount() {\n    this.interval = setInterval(() => this.countDownTimer(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  handleClickReset() {\n    this.stopAlarm();\n    this.setState({\n      breakDuration: 5,\n      sessionDuration: 25,\n      timerLabel: 'Session',\n      timeLeftMinutes: 25,\n      timeLeftSecondes: 0,\n      countDownIsRunning: false\n    });\n  }\n\n  playAlarm() {\n    let audio = document.getElementById('beep');\n    audio.play();\n  }\n\n  stopAlarm() {\n    let audio = document.getElementById('beep');\n    audio.pause();\n    audio.currentTime = 0;\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='text-center h3 mb-3 font-weight-bold text-monospace border-bottom'>Podomoro Timer</div>\n        <Setting handleClickSetting={this.handleClickSetting} breakDuration={this.state.breakDuration} sessionDuration={this.state.sessionDuration} />\n        <Displaying timerLabel={this.state.timerLabel} timeLeftMinutes={this.state.timeLeftMinutes} timeLeftSecondes={this.state.timeLeftSecondes} />\n        <Running countDownIsRunning={this.state.countDownIsRunning} handleClickPlayStop={this.handleClickPlayStop} handleClickReset={this.handleClickReset} />\n        <audio id='beep'><source src={audio} type='audio/mpeg'></source></audio>\n      </div>\n    )\n  };\n\n}\n\nexport default Podomoro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Podomoro from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Podomoro />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}